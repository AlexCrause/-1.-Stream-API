package org.example.task2;

import java.util.Scanner;

/**
 *
 Задача 2: Техническое задание на разработку информационной системы UMarket
 Вам доверено спроектировать и реализовать классы предметной области,
 которые позволят в дальнейшем вести разработку ИС со следующим функционалом:

    1. Осуществлять учет продовольственных и непродовольственных товаров, которыми торгует UMarket.
    2. Предоставлять покупателям возможность фильтрации продовольственных товаров по следующим видам:
        - Снеки;
        - Полуфабрикаты;
        - Продукты для приготовления;
        - Все продовольственные товары.

    3. Формировать онлайн корзину из продовольственных товаров.
    4. Осуществлять балансировку онлайн корзины с целью получения такого набора продуктов питания,
        который включает все основные питательные элементы.


 Особенности бизнес-логики сервиса UMarket.

 Модуль онлайн покупок должен осуществлять контроль за попадающими в покупательскую корзину продуктами,а именно:

    • в онлайн корзину можно добавить только продовольственные товары;
    • в зависимости от желания покупателя, в онлайн корзине могут находиться как все присутствующие
        в UMarket продовольственные товары, так и исключительно товары той категории,
        которую выбрал покупатель посредством настроек фильтрации (фильтрация по видам продовольственных товаров).

 Необходимо предусмотреть типобезопасность онлайн корзины, так как в момент «автоматической балансировки»
 она должна пополняться продовольственными товарами из списка товаров UMarket.
 Необходимо учесть, что в случае формирования онлайн корзины конкретного вида продовольственных товаров,
 дополнять корзину необходимо товарами именно из выбранной покупателем категории продовольственных товаров.
 С целью упрощения алгоритма балансировки онлайн корзины, будем считать, что каждый продовольственный
 продукт содержит всего лишь один питательный элемент: белки / жиры / углеводы. Следовательно, есть вероятность,
 что все выбранные товары будут представителями одного и того же питательного элемента (например, углеводными).
 В свою очередь, балансировка делает так, чтобы в корзине были представлены все питательные элементы.
 */
public class Program {

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        UMarket uMarket = new UMarket();
        System.out.println("Добро пожаловать в магазин U-Market!");

        while (true) {
            System.out.println("=============================");
            System.out.println("0 - Завершение работы приложения");
            System.out.println("1 - Отобразить список товаров");
            System.out.println("2 - Сформировать онлайн корзину из снеков");
            System.out.println("3 - Сформировать онлайн корзину из полуфабрикатов");
            System.out.println("4 - Сформировать онлайн корзину из продуктов для приготовления");
            System.out.println("5 - Сформировать онлайн корзину из любых продовольственных товаров");
            System.out.println("=============================");
            System.out.println("Введите номер пункта меню:");

            if (scanner.hasNextInt()) {
                int no = scanner.nextInt();
                scanner.nextLine();
                switch (no) {
                    case 0 -> {
                        System.out.println("Завершение работы приложения");
                        return;
                    }
                    case 1 -> {
                        System.out.println("Список товаров: ");
                        uMarket.printThings(Thing.class);
                    }
                    case 2 -> createCart(Snack.class, uMarket);
                    case 3 -> createCart(SemifinishedFood.class, uMarket);
                    case 4 -> createCart(HealthyFood.class, uMarket);
                    case 5 -> createCart(Food.class, uMarket);
                    default -> System.out.println("Пункт меню не существует.\nПовторите попытку ввода");
                }
            } else {
                System.out.println("Введено некорректное значение.\nПовторите попытку ввода");
                scanner.nextLine();
            }
        }
    }

    /**
     * Сформировать онлайн корзину из продовольственных товаров
     * @param market Магазин и список товаров
     * @param <T> Тип товара
     */
    static <T extends Food> void createCart(Class<T> clazz, UMarket market) {

        Cart<T> cart = new Cart<>(clazz, market);

        while (true) {

            System.out.println("Список доступных товаров:");
            System.out.println("[0] Завершение формировния корзины + балансировка");
            market.printThings(clazz);
            System.out.println("Укажите номер товара для добавления: ");

            if (scanner.hasNextInt()){

                int no = scanner.nextInt();
                scanner.nextLine();
                if (no == 0) {
                    cart.cardBalancing();
                    System.out.println("Ваша корзина содержит продукты:");
                    cart.printFoodStuffs();
                    return;
                } else {
                    T thing = market.getThingsByIndex(clazz, no);
                    if (thing == null) {
                        System.out.println("Некорректный номер товара.\nПовторите попытку ввода");
                        continue;
                    }
                    cart.getFoodStuffs().add(thing);
                    System.out.println("Товар добавлен в корзину");
                    System.out.println("Ваша корзина содержит продукты:");
                    cart.printFoodStuffs();
                }
            } else {
                System.out.println("Введено некорректное значение.\nПовторите попытку ввода");
                scanner.nextLine();
            }
        }
    }
}
